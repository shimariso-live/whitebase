insmod lvm
insmod xfs
insmod probe
insmod sleep
insmod keystatus

if [ "${grub_platform}" = "pc" ]; then
  insmod vbe
  gfxpayload=keep
  set timeout=0
  if keystatus --shift; then
    set timeout=-1
  fi
elif [ "${grub_platform}" = "efi" ]; then
  insmod efi_gop
  insmod efi_uga
  set timeout=3
fi
#set gfxmode=1024x768
loadfont /usr/share/grub/ascii.pf2
terminal_output gfxterm

if [ -f /boot/grub/background.png ]; then
  background_image /boot/grub/background.png
fi

if [ -n "$BOOT_PARTITION" ]; then
  probe -u $BOOT_PARTITION --set=BOOT_PARTITION_UUID
fi

if [ -z "$BOOT_PARTITION_UUID" ]; then
  echo "Boot partition could not be determined! system may not boot."
  sleep 3
fi

if [ -f "($BOOT_PARTITION)/system.cfg" ]; then
  source ($BOOT_PARTITION)/system.cfg
fi

if [ -z "$default" ]; then
  set default=normal
fi

if [ -z "$LINUX_ARGS" ]; then
  LINUX_ARGS="quiet net.ifnames=0 edd=off xen_blkback.persistent_grant_unused_seconds=0"
fi

if [ -n "$dom0" ]; then
  # "pv" or "pvh"
  XEN_ARGS="$XEN_ARGS dom0=$dom0"
  if [ -z "$dom0_mem" ]; then
    dom0_mem="768M,max:768M"
  fi
fi

if [ "$dom0" = "pvh" ]; then
  LINUX_ARGS="$LINUX_ARGS console=hvc0 earlyprintk=xen"
  if [ -z "$dom0_iommu"]; then
    dom0_iommu="map-reserved"
  fi
fi

if [ -n "$dom0_iommu" ]; then
  XEN_ARGS="$XEN_ARGS dom0-iommu=$dom0_iommu"
fi

if [ -n "$dom0_mem" ]; then
  XEN_ARGS="$XEN_ARGS dom0_mem=$dom0_mem"
fi

if [ -n "$xen_pciback_hide" ]; then
  XEN_ARGS="$XEN_ARGS iommu=required"
  LINUX_ARGS="$LINUX_ARGS xen-pciback.hide=$xen_pciback_hide"
fi

if [ -n "$intel_iommu" ]; then
  LINUX_ARGS="$LINUX_ARGS intel_iommu=$intel_iommu"
else
  LINUX_ARGS="$LINUX_ARGS intel_iommu=igfx_off"
fi

if [ -n "$amd_iommu" ]; then
  LINUX_ARGS="$LINUX_ARGS amd_iommu=$amd_iommu"
fi

set TITLE="Walbrix __VERSION__"

if [ -z "$systemd_unit" ]; then
  set systemd_unit="graphical.target"
fi

if [ "$systemd_unit" = "graphical.target" ]; then
  LINUX_ARGS="$LINUX_ARGS video=1024x768"
fi

if [ "$systemd_unit" = "installer.target" ]; then
  TITLE="$TITLE installer"
fi

if [ -f "($BOOT_PARTITION)/boottime.txt" ]; then
  set timeout=10
fi

if [ -z "$dom0_mem"]; then
  menuentry "$TITLE" --id normal {
    echo 'Loading kernel...'
    linux /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS systemd.unit=$systemd_unit
    echo 'Loading initramfs...'
    initrd /boot/initramfs
  }
  menuentry "$TITLE (text mode)" --id text {
    echo 'Loading kernel...'
    linux /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS systemd.unit=multi-user.target
    echo 'Loading initramfs...'
    initrd /boot/initramfs
  }
else
  set MULTIBOOT=multiboot
  set MODULE=module

  if [ "${grub_platform}" = "efi" ]; then
    set MULTIBOOT=multiboot2
    set MODULE=module2
    set EFI_STR="(EFI)"
  fi
  menuentry "Walbrix __VERSION__(Xen) $EFI_STR" --id normal {
    echo 'Loading Xen...'
    $MULTIBOOT /boot/xen.gz $XEN_ARGS
    echo 'Loading dom0 kernel...'
    $MODULE /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS systemd.unit=$systemd_unit
    echo 'Loading initramfs...'
    $MODULE /boot/initramfs
  }
  menuentry "Walbrix __VERSION__(Xen, text mode) $EFI_STR" --id text {
    echo 'Loading Xen...'
    $MULTIBOOT /boot/xen.gz $XEN_ARGS
    echo 'Loading dom0 kernel...'
    $MODULE /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS systemd.unit=multi-user.target
    echo 'Loading initramfs...'
    $MODULE /boot/initramfs
  }
fi
menuentry "Transient(rescue) mode" --id transient {
  echo 'Loading kernel...'
  linux /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS rdinit=/init-transient
  echo 'Loading initramfs...'
  initrd /boot/initramfs
}

menuentry "Transient(rescue) text mode" --id transient-text {
  echo 'Loading kernel...'
  linux /boot/kernel boot_partition_uuid=$BOOT_PARTITION_UUID $LINUX_ARGS systemd.unit=multi-user.target rdinit=/init-transient
  echo 'Loading initramfs...'
  initrd /boot/initramfs
}

