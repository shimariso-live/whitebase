#!/usr/bin/python
import os,sys,ctypes,ctypes.util,subprocess,pathlib,shutil,glob

# libc functions
libc = ctypes.CDLL(ctypes.util.find_library('c'), use_errno=True)
libc.reboot.argtypes = (ctypes.c_int,)
RB_HALT_SYSTEM = 0xcdef0123
libc.mount.argtypes = (ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_ulong, ctypes.c_char_p)
MS_MOVE = 0x2000
MS_RELATIME = (1<<21)
libc.umount.argtypes = (ctypes.c_char_p,)
libc.pivot_root.argtypes = (ctypes.c_char_p, ctypes.c_char_p)

def _exception_handler(exctype, value, traceback):
    print(value)
    rst = libc.reboot(RB_HALT_SYSTEM)

def ensure_run_mounted():
    if os.path.ismount("/run"): return
    if libc.mount(b"tmpfs", b"/run", b"tmpfs", MS_RELATIME, b"") < 0:
        raise Exception("/run counldn't be mounted")

def ensure_sys_mounted():
    if os.path.ismount("/sys"): return
    if libc.mount(b"sysfs", b"/sys", b"sysfs", 0, b"") < 0:
        raise Exception("/sys counldn't be mounted")

def ensure_proc_mounted():
    if os.path.ismount("/proc"): return
    if libc.mount(b"proc", b"/proc", b"proc", 0, b"") < 0:
        raise Exception("/proc counldn't be mounted")

def ensure_dev_mounted():
    if os.path.ismount("/dev"): return
    if libc.mount(b"udev", b"/dev", b"devtmpfs", 0, b"mode=0755,size=10M") < 0:
        raise Exception("/dev counldn't be mounted")

def mount_tmpfs(target):
    os.makedirs(target,exist_ok=True)
    if libc.mount(b"tmpfs", target.encode(), b"tmpfs", MS_RELATIME, b"") < 0:
        raise Exception("Failed to mount tmpfs on %s." % target)

def mount_overlayfs(lowerdir,upperdir,workdir,target):
    os.makedirs(upperdir,exist_ok=True)
    os.makedirs(workdir,exist_ok=True)
    os.makedirs(target,exist_ok=True)
    mountopts = "lowerdir=%s,upperdir=%s,workdir=%s" % (lowerdir, upperdir, workdir)
    if libc.mount(b"overlay", target.encode(), b"overlay", MS_RELATIME, mountopts.encode()) < 0:
        raise Exception("Overlay filesystem(%s) counldn't be mounted on %s. errno=%d" 
            % (mountopts,target,ctypes.get_errno()))

def move_mount(old, new):
    os.makedirs(new,exist_ok=True)
    if libc.mount(old.encode(), new.encode(), None, MS_MOVE, None) < 0:
        raise Exception("Moving mount point from %s to %s failed. errno=%d" % (old, new, ctypes.get_errno()))

def umount(mountpoint):
    return libc.umount(mountpoint.encode())

def pivot_root(new_root, put_old):
    os.makedirs(put_old,exist_ok=True)
    if libc.pivot_root(new_root.encode(), put_old.encode()) < 0:
        raise Exception("pivot_root(%s,%s) failed. errno=%d" % (new_root,put_old,ctypes.get_errno()))

def read_qemu_fw_cfg(root):
    by_name = os.path.join(root, "sys/firmware/qemu_fw_cfg/by_name")
    ssh_public_key = os.path.join(by_name, "opt/ssh-public-key/raw")
    if os.path.isfile(ssh_public_key):
        shutil.copyfile(ssh_public_key, os.path.join(root, "root/.ssh/authorized_keys"))
    
    ssh_host_keys = os.path.join(by_name, "opt/ssh-host-keys/raw")
    if os.path.isfile(ssh_host_keys):
        subprocess.call(["/bin/tar", "xf", ssh_host_keys, "-k", "-C", os.path.join(root, "etc/ssh")])

def kexec_boot(root, verbose=False):
    if not os.path.isdir(root): return False

    fstype = None
    device = None
    with open("/proc/mounts") as f:
        for line in f:
            if line[0] != '/': continue
            cols = line.split(' ', 3)
            if len(cols) < 3 or cols[1] != os.path.realpath(root): continue
            #else
            device = cols[0]
            fstype = cols[2]

    if fstype is None or device is None: 
        if verbose: print("Could not determine fstype/device")
        return False

    bootdir = os.path.join(root, "boot")
    kernel = None
    initramfs = None
    for candidate in ["kernel", "vmlinuz"]:
        if os.path.exists(os.path.join(bootdir, candidate)):
            kernel = candidate
            if verbose: print("Kernel found: %s" % kernel)
            break
    if kernel is not None:
        for candidate in ["initramfs", "initrd.img"]:
            if os.path.exists(os.path.join(bootdir, candidate)):
                initramfs = candidate
                if verbose: print("Initramfs found: %s" % initramfs)
                break
    if kernel is None:
        latest = 0
        for e in glob.glob(os.path.join(bootdir, "vmlinuz-*")):
            if e.endswith(".old"): continue
            mtime = os.path.getmtime(e)
            if mtime < latest: continue
            kernel = e
            latest = mtime
            if verbose: print("Kernel found: %s" % kernel)
        if kernel is not None:
            initramfs = os.path.join(bootdir, "initramfs") + os.path.basename(kernel)[7:] + ".img"
            if not os.path.isfile(initramfs): initramfs = None
            elif verbose: print("Initramfs found: %s" % initramfs)

    if kernel is None:
        if verbose: print("Kernel not found")
        return False
    with open("/proc/cmdline") as f:
        cmdline = f.read()
    if verbose: print("cmdline=%s" % cmdline)
    cmdline_args = cmdline.split()
    has_fstab = False
    fstab = os.path.join(root, "etc/fstab")
    if os.path.isfile(fstab):
        with open(fstab) as f:
            for line in f:
                cols = line.split('#', 1)[0].split(None, 2)
                if len(cols) < 2: continue
                if cols[1] == "/":
                    has_fstab = True
                    break
    if verbose: print("root entry %s in fatsb" % ("found" if has_fstab else "not found"))
    has_rw = False
    new_cmdline = ""
    for arg in cmdline_args:
        if arg.startswith("root=") or arg.startswith("rootfstype="): continue
        if not has_fstab and arg == "ro": continue
        if arg == "rw": has_rw = True
        if new_cmdline != "": new_cmdline += ' '
        new_cmdline += arg
    new_cmdline += " root=" + device + " rootfstype=" + fstype
    if not has_fstab and not has_rw: new_cmdline += " rw" # always mount root filesystem r/w when fstab is missing
    if verbose: print("new cmdline=%s" % new_cmdline)

    kexec_cmdline = ["/usr/sbin/kexec", "-l", "--append=" + new_cmdline]
    if initramfs is not None: kexec_cmdline.append("--initrd=" + initramfs)
    kexec_cmdline.append(kernel)
    if verbose: print("kexec cmdline", kexec_cmdline)
    return subprocess.call(kexec_cmdline) == 0

def determine_device_to_mount(device_to_try):
    with subprocess.Popen(["/sbin/blkid","-s","TYPE","-o","value",device_to_try],stdout=subprocess.PIPE, stderr=subprocess.PIPE) as blkid:
        output, error = blkid.communicate()
        exit_code = blkid.returncode
    if exit_code != 0:
        print("Determining filesystem type failed: %s" % error.decode().strip())
        return None
    #else
    fstype = output.decode().strip()
    print("Filesystem type = %s" % fstype)
    if fstype == "crypto_LUKS":
        ensure_run_mounted() # cryptsetup needs /run to place lock files
        if subprocess.call(["/sbin/cryptsetup","open", device_to_try,"data"]) == 0:
            device_to_try = "/dev/mapper/data"
        else: 
            device_to_try = None
            subprocess.call("bash")

    return device_to_try

def main():
    RW="/run/.rw"
    NEWROOT="/run/.newroot"

    ensure_dev_mounted()
    ensure_proc_mounted()

    try:
        kexec_success = False
        device_to_mount = determine_device_to_mount("/dev/vdb")
        if device_to_mount is not None and subprocess.call(["mount", "-o", "ro", device_to_mount, "/mnt"]) == 0:
            kexec_success = kexec_boot("/mnt")
            if kexec_success: print("Booting with new root filesystem on /dev/vdb...")
        elif subprocess.call(["mount", "-t", "virtiofs", "-o", "ro", "fs", "mnt"]) == 0:
            # try booting virtiofs root
            kexec_success = kexec_boot("/mnt")
            if kexec_success: print("Booting with new root filesystem on virtiofs...")

        umount("mnt")
        if kexec_success: os.execl("/usr/sbin/kexec", "/usr/sbin/kexec", "-e")
    except Exception as e:
        print(e)

    ensure_run_mounted()
    ensure_sys_mounted()

    mount_tmpfs(RW)
    os.mkdir(NEWROOT)
    mount_overlayfs("/", os.path.join(RW, "root"), os.path.join(RW, "work"), NEWROOT)
    print("Root filesystem mounted.")

    new_run = os.path.join(NEWROOT, "run")
    mount_tmpfs(new_run)
    move_mount(RW, os.path.join(new_run, "initramfs/rw"))

    move_mount("/dev", os.path.join(NEWROOT, "dev"))
    move_mount("/sys", os.path.join(NEWROOT, "sys"))
    move_mount("/proc", os.path.join(NEWROOT, "proc"))

    try:
        read_qemu_fw_cfg(NEWROOT)
    except Exception as e:
        print("read_qemu_fw_cfg: %s" % e)

    print("Starting actual /sbin/init...")
    os.chdir(NEWROOT)
    pivot_root(".", "run/initramfs/ro")
    os.chroot(".")
    umount("/run/initramfs/ro/run")
    os.execl("/sbin/init", "/sbin/init")

if __name__ == "__main__":
    if os.getpid() != 1: raise Exception("PID must be 1")
    sys.excepthook = _exception_handler
    main()

