#!/bin/sh
set -e
if [ $$ -ne 1 ]; then
	echo "PID must be 1"
	exit 1
fi

mount -t proc proc /proc

if [ -b /dev/vdb ] && mount -o ro /dev/vdb /mnt; then
	if /usr/sbin/kexec-byroot --quiet /mnt; then
		echo "Booting with new root filesystem on /dev/vdb..."
		kexec -e
	fi
	umount /mnt
fi

if mount -t virtiofs -o ro fs /mnt; then
	if /usr/sbin/kexec-byroot --quiet /mnt; then
		echo "Booting with new root filesystem on virtiofs..."
		kexec -e
	fi
	umount /mnt
fi

umount /proc

mount -t tmpfs tmpfs /run
mkdir /run/.rw
mount -t tmpfs tmpfs /run/.rw # This must not fail

NEWROOT=/run/.newroot

mkdir -p /run/.rw/root /run/.rw/work $NEWROOT
rm -f /run/.rw/root/etc/ld.so.cache
if mount -t overlay -o lowerdir=/,upperdir=/run/.rw/root,workdir=/run/.rw/work overlay $NEWROOT; then
	echo "Root filesystem mounted."
else
	echo "Root filesystem couldn't be mounted. Halting."
	exit 1
fi

mount -t tmpfs tmpfs $NEWROOT/run
mount -t sysfs sysfs $NEWROOT/sys

QEMU_FW_CFG_BY_NAME=$NEWROOT/sys/firmware/qemu_fw_cfg/by_name

if [ -f $QEMU_FW_CFG_BY_NAME/opt/ssh-public-key/raw ]; then
        cat $QEMU_FW_CFG_BY_NAME/opt/ssh-public-key/raw >> $NEWROOT/root/.ssh/authorized_keys
fi

if [ -f $QEMU_FW_CFG_BY_NAME/opt/ssh-host-keys/raw ]; then
	tar xf $QEMU_FW_CFG_BY_NAME/opt/ssh-host-keys/raw -k -C $NEWROOT/etc/ssh || echo "SSH host keys not extracted."
fi

mkdir -p $NEWROOT/run/initramfs/rw
mount --move /run/.rw $NEWROOT/run/initramfs/rw
mount --move /dev $NEWROOT/dev

cd $NEWROOT
mkdir run/initramfs/ro
pivot_root . run/initramfs/ro
chroot . umount /run/initramfs/ro/run
exec chroot . /sbin/init

